{"version":3,"sources":["Services/api.js","Views/MovieDetailView/MovieDetailView.styled.jsx","Views/MovieDetailView/MovieDetailView.js"],"names":["axios","defaults","baseURL","params","api_key","language","GetTrendingFilms","a","get","GetFilmByID","id","GetActorsByFilmId","GetReviewsByFilmId","page","SearchFilmByName","query","include_adult","Image","styled","img","Button","button","CastView","lazy","ReviewsView","MovieDetailView","history","useHistory","location","useLocation","useRouteMatch","url","path","useState","film","setFilm","filmId","useParams","getYear","dateString","split","useEffect","response","status","data","poster_path","title","release_date","vote_average","overview","genres","year","parseGenres","map","name","join","Error","console","log","message","fetchData","type","onClick","push","state","from","label","src","alt","to","pathname","fallback"],"mappings":"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","file":"static/js/MovieDetail-page.516a9c6e.chunk.js","sourcesContent":["import axios from 'axios';\nconst API_KEY = '12355de9ae36d576f407c0d316008e50';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = { api_key: API_KEY, language: 'en-US' };\n\nexport const GetTrendingFilms = async () => {\n  return await axios.get(`/trending/movie/day`);\n};\n\nexport const GetFilmByID = async id => {\n  return await axios.get(`/movie/${id}`);\n};\n\nexport const GetActorsByFilmId = async id => {\n  return await axios.get(`/movie/${id}/credits`);\n};\n\nexport const GetReviewsByFilmId = async id => {\n  return await axios.get(`/movie/${id}/reviews`, {\n    params: {\n      page: 1,\n    },\n  });\n};\n\n// https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\nexport const SearchFilmByName = async query => {\n  return await axios.get(`/search/movie`, {\n    params: {\n      query,\n      page: 1,\n      include_adult: false,\n    },\n  });\n};\n","import styled from '@emotion/styled';\r\n\r\nexport const Image = styled.img`\r\n  width: 280px;\r\n  height: auto;\r\n  display: block;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin-left: 10px;\r\n  margin-bottom: 15px;\r\n`;\r\n","import { lazy, Suspense } from 'react';\nimport { useState, useEffect } from 'react';\nimport {\n  useParams,\n  NavLink,\n  Route,\n  useRouteMatch,\n  useLocation,\n  useHistory,\n} from 'react-router-dom';\nimport { GetFilmByID } from '../../Services/api';\nimport { Button, Image } from './MovieDetailView.styled';\n\nconst CastView = lazy(() =>\n  import('../CastView/CastView' /*webpackChunkName: \"cast\"*/),\n);\nconst ReviewsView = lazy(() =>\n  import('../ReviewsView/ReviewsView' /*webpackChunkName: \"Reviews\"*/),\n);\nconst MovieDetailView = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const { url, path } = useRouteMatch();\n  const [film, setFilm] = useState({});\n  const { filmId } = useParams();\n\n  function getYear(dateString) {\n    return dateString.split('-')[0];\n  }\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await GetFilmByID(filmId);\n        if (response.status === 200) {\n          const {\n            id,\n            poster_path,\n            title,\n            release_date,\n            vote_average,\n            overview,\n            genres,\n          } = response.data;\n          const year = getYear(release_date);\n          const parseGenres = genres.map(({ name }) => name).join(', ');\n          setFilm({\n            id,\n            poster_path,\n            title,\n            year,\n            vote_average,\n            overview,\n            parseGenres,\n          });\n        } else {\n          throw new Error('Error - ' + response.status);\n        }\n      } catch (error) {\n        console.log('rejected   ' + error.message);\n        return null;\n      }\n    }\n    fetchData();\n  }, [filmId]);\n\n  const { poster_path, title, year, vote_average, overview, parseGenres } =\n    film;\n\n  const onGoBack = () => {\n    history.push(location?.state?.from?.location ?? '/');\n  };\n\n  return (\n    <>\n      {film && (\n        <>\n          <Button type=\"button\" onClick={onGoBack}>\n            {location?.state?.from?.label ?? 'GoBack'}\n          </Button>\n          <Image\n            src={'https://image.tmdb.org/t/p/w500' + poster_path}\n            alt={title}\n          />\n          <h2>\n            {title} ({year})\n          </h2>\n          <p>User Score: {vote_average * 10} %</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <span> {parseGenres}</span>\n          <hr />\n          <h1>Additional information</h1>\n\n          <ul>\n            <li>\n              {/* <NavLink to={`${url}/cast`}>Cast</NavLink> */}\n              <NavLink\n                to={{\n                  pathname: `${url}/cast`,\n                  state: { from: location?.state?.from ?? '/' },\n                }}\n              >\n                Cast\n              </NavLink>\n            </li>\n            <li>\n              {/* <NavLink to={`${url}/reviews`}>Reviews</NavLink> */}\n              <NavLink\n                to={{\n                  pathname: `${url}/reviews`,\n                  state: { from: location?.state?.from ?? '/' },\n                }}\n              >\n                Reviews\n              </NavLink>\n            </li>\n          </ul>\n          <Suspense fallback={<h1>LOADING...</h1>}>\n            {/* <Route path=\"/movies/:movieId/cast\"> */}\n            <Route path={`${path}/cast`}>\n              <CastView />\n            </Route>\n            {/* <Route path=\"/movies/:movieId/reviews\"> */}\n            <Route path={`${path}/reviews`}>\n              <ReviewsView />\n            </Route>\n          </Suspense>\n          <hr />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetailView;\n"],"sourceRoot":""}